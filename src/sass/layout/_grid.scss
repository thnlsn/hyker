// This file is a partial (it was named leading with a _) which tells Sass that this should not be generated into a CSS file, and instead included in one by importing

.row {
  // Standard used is to have rows be 1140px, but we use the rem equal to allow for more fluid design
  // max-width is set instead of just width because max-width only uses the declared amout if there is space, if not, it takes up 100% of the space (so it will adjust based on viewport)
  max-width: $grid-width; // If < than max-width, take 100% of available space

  @include respond(tab-land) {
    max-width: 99.5%;
    padding: 0 2.5rem; // In very small viewports rows will take up 100% of space because the viewport will be less than the 50rem above, so we add padding so there will always be space
  }

  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 2.5rem; // In very small viewports rows will take up 100% of space because the viewport will be less than the 50rem above, so we add padding so there will always be space
  }

  /* 
  @include respond(tab-port) {
    max-width: 90%;
  } */

  // This sets both the left and right margins to auto, which means they will be the same, whatever that is (meaning it will be centered)
  margin: 0 auto;

  // This is the same as saying .row:not()
  // :not selector selects EVERYTHING other than what is in the pseudo-class (in this case :last-child)
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small; // All final rows in a group of rows will have a small margin bottom
    }
  }

  // Clearfix is required on the rows because all the child elements are being floated, so their heights would collapse to 0px and they will all appear on top of each other
  @include clearfix();

  // We use class instead of Reacts className because when everything compiles down, it will all become class
  // This bracket based selector allows you to select an attribute, so in this case, all classes that BEGIN (^) with col-
  [class^='col-'] {
    float: left;
    &:not(:last-child) {
      // So that the last column does not have extra white space making the grid look off center
      margin-right: $gutter-horizontal;

      @include respond(tab-port) {
        margin-right: 0; // No gutter anymore because we've set all the columns to 100% width, which means theres no margins between them because theres only 1 now
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tab-port) {
      // So instead of all the calculations for each column below, each part of a row will just become a col-1-of-1, basically
      width: 100% !important; // !important because it is very neccesary for this to override all the width calc's of the column types below
    }
  }

  // This entire grid system is based on calculations which are based on sass variables, meaning it is easily changeable, as we can edit the gutters and the colums will adapt to that by getting smaller or larger to always fit the vertical space

  .col-1-of-2 {
    // Use built in CSS function calc() because it can mix units (rem & %) since it is calculated during the Visual Formatting Model phase since it is at that point that all units have been calculated as px (so in reality your are calculating px and not actually mixing units)
    // Sass cannot do this because it compiles prior to the above mentioned phase, when final sizes are not known in px
    width: calc(
      (100% - #{$gutter-horizontal}) / 2
    ); // We take 100% of the width and minus the gutters on the sides, then divide by 2 because it is a 1 of 2 row, meaning 2 halves
    // The #{} wrapping the Sass variable is just neccesary syntax to work within CSS functions like calc()
  }

  .col-1-of-3 {
    // We multiply the horizontal gutter by 2 because there will be at least 2 gutters in a 3 column row
    width: calc((100% - (#{$gutter-horizontal} * 2)) / 3);
  }

  .col-2-of-3 {
    // We multiply the horizontal gutter by 2 because there will be at least 2 gutters in a 3 column row
    width: calc(
      ((100% - (#{$gutter-horizontal} * 2)) / 3 * 2) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    // We multiply the horizontal gutter by 3 because there will be at least 3 gutters in a 4 column row
    width: calc((100% - (#{$gutter-horizontal} * 3)) / 4);
  }

  .col-2-of-4 {
    width: calc(
      (((100% - (#{$gutter-horizontal} * 3)) / 4) * 2) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    // We multiply the horizontal gutter by 3 because there will be at least 3 gutters in a 4 column row
    width: calc(
      (((100% - (#{$gutter-horizontal} * 3)) / 4) * 3) +
        (#{$gutter-horizontal} * 2)
    );
  }
}
