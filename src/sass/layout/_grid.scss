// This file is a partial (it was named leading with a _) which tells Sass that this should not be generated into a CSS file, and instead included in one by importing

.row {
  // Standard used is to have rows be 1140px, but we use the rem equal to allow for more fluid design
  // max-width is set instead of just width because max-width only uses the declared amout if there is space, if not, it takes up 100% of the space (so it will adjust based on viewport)
  max-width: $grid-width;
  background-color: #eee;
  // This sets both the left and right margins to auto, which means they will be the same, whatever that is (meaning it will be centered)
  margin: 0 auto;

  // This is the same as saying .row:not()
  // :not selector selects EVERYTHING other than what is in the pseudo-class (in this case :last-child)
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  .col-1-of-2 {
    // Use built in CSS function calc() because it can mix units (rem & %) since it is calculated during the Visual Formatting Model phase since it is at that point that all units have been calculated as px (so in reality your are calculating px and not actually mixing units)
    // Sass cannot do this because it compiles prior to tha above mention phase, when final sizes are not known in px
    width: calc(
      (100% - #{$gutter-horizontal}) / 2
    ); // We take 100% of the width and minus the gutters on the sides, then divide by 2 because it is a 1 of 2 row, meaning 2 halves
    // The #{} wrapping the Sass variable is just neccesary syntax to work within CSS functions like calc()

    background-color: orangered;

    &:not(:last-child) {
      // So that the last column does not have extra white space making the grid look off center
      margin-right: $gutter-horizontal;
    }
  }
}
