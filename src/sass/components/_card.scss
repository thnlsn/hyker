.card {
  // FUNTIONALITY
  perspective: 150rem;
  -moz-perspective: 150rem; // So that it will work in Mozilla Firefox

  position: relative; // For the card sides to be exact (front & back) but also the heading placement

  height: 52rem; // Have to declare a height to each card because absolute positioning took the children out of normal flow (like floats), so there is nothing to encompass, so it doesn't

  // COMMON TO ALL CARDS
  &__side {
    height: 52rem;
    transition: all 0.8s ease;

    // Positioned absolutely based on the card class, since it fully encompasses
    position: absolute; // on the card__side div because it is the one that is common between --front and --back
    top: 0;
    left: 0;

    width: 100%; // We have to declare this because setting absolute positioning collapsed the width since absolute positioned elements are not block level

    backface-visibility: hidden; // Because we do not want to see the inverse of the frontside when we are looking at the backside
    overflow: hidden; // Set because the image clips out of the div, so we set anything out to be hidden (so the radius is still seen)
    border-radius: $border-radius-small;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15); // CREATE VARIABLE FOR THESE SHADOWS LATER

    &--front {
      background-color: $color-white;
    }

    &--back {
      // The starting point is flipped to half a rotation worth of degrees (essentially so it is back facing)
      transform: rotateY(180deg);

      // First card
      &-1 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }
      // Second card
      &-2 {
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        );
      }
      // Third card
      &-3 {
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        );
      }
    }
  }

  // We simultaniously flip the front and back so it gives the effect of flipping around
  &:hover &__side--front {
    // Rotate the front side by half a full rotation in the opposite direction
    transform: rotateY(-180deg);
  }
  &:hover &__side--back {
    // We start the back side already rotated, so instead we rotate it to it's 0deg state
    transform: rotateY(0deg);
  }

  // FRONT SIDE STYLING
  &__picture {
    background-size: cover; // Setting it here so it applies to
    height: 23rem;
    // webkit is a prefix for different browsers that might not yet support more modern css properties such as this
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

    &--1 {
      // We can se 2 backgrounds, the first is the linear gradient, and the second is the image (but the first will cover the second)
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        // Image path may seem incorrect but it is the path from the style.css in the css folder, since that is where all this sass will compile to.
        url(../images/nat-5.jpg);
      background-blend-mode: screen;
    }

    &--2 {
      // Image path may seem incorrect but it is the path from the style.css in the css folder, since that is where all this sass will compile to.
      background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ),
        url(../images/nat-6.jpg);
      background-blend-mode: screen;
    }
    &--3 {
      // Image path may seem incorrect but it is the path from the style.css in the css folder, since that is where all this sass will compile to.
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url(../images/nat-7.jpg);
      background-blend-mode: screen;
    }
  }

  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;

    position: absolute;
    top: 12rem;
    right: 2rem;
  }

  // You could nest it in __heading as &-span, but that is bad BEM practice since it isn't a child or a modifier of __heading
  &__heading-span {
    padding: 1rem 1.5rem;

    // "box-decoration-break: clone" applies all declarations (so the padding above) to all boxes created by an element (in this case to apply to all lines of text if it were to break at a slimmer viewport)
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;

    &--1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 0.85),
        rgba($color-secondary-dark, 0.85)
      );
    }

    &--2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.85),
        rgba($color-primary-dark, 0.85)
      );
    }
    &--3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 0.85),
        rgba($color-tertiary-dark, 0.85)
      );
    }
  }

  &__details {
    padding: 3rem;
    ul {
      list-style: none;
      width: 80%; // So that the underlining does not expand the entire width of the card
      margin: 0 auto; // Best way to center a block element inside a block element

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        &:not(:last-child) {
          border-bottom: 1px solid $color-grey-light-2;
        }
      }
    }
  }

  // BACK SIDE STYLING
  &__cta {
    @include absolute-center;
    width: 90%;
    text-align: center;
  }

  &__price-box {
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }
}
